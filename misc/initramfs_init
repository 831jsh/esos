#! /bin/busybox sh

# Just in case
rescue_shell() {
	echo "Something bad happened; attempting to drop into a shell..."
	/bin/busybox --install -s
	exec setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
}

# From: https://wiki.gentoo.org/wiki/Custom_Initramfs
cmdline() {
	local value
	value=" $(cat /proc/cmdline) "
	value="${value##* $1=}"
	value="${value%% *}"
	[ "$value" != "" ] && echo "$value"
}

# Install BusyBox
/bin/busybox --install -s

# Hide kernel console messages
dmesg -n 1

# Some devices are delayed
echo "Waiting for devices to settle..."
sleep 5

# A few requirements
mount -t proc none /proc || rescue_shell
mount -t sysfs none /sys || rescue_shell
mdev -s || rescue_shell

# Catch if /proc/vmcore exists -- we capture the crash dump and reboot
if [ -e /proc/vmcore ]; then
	echo "It appears a crash dump kernel is running."
	echo "Attempting to resolve the 'esos_logs' file system device..."
	echo 1 > /sys/bus/pci/rescan
	uevent mdev & mdev -s
	logs_fs_dev="$(findfs LABEL=esos_logs)" || \
	(echo "Error resolving the logs device node!"; rescue_shell)
	echo "Saving /proc/vmcore to the ESOS log file system..."
	mount -o sync ${logs_fs_dev} /mnt/tmp || rescue_shell
	makedumpfile -E -d 31 /proc/vmcore /mnt/tmp/dumpfile-`date +"%s"` || \
	rescue_shell
	echo "Unmounting the ESOS log file system..."
	umount /mnt/tmp || rescue_shell
	echo "Rebooting..."
	reboot -f || rescue_shell
fi

# Make sure we have enough physical memory
if [ `cat /proc/meminfo | grep MemTotal | awk '{print $2}'` -lt 3500000 ]; then
	echo "ESOS requires at least 3.5 GB of usable RAM!"
	rescue_shell
fi

# Attempt to resolve the FS label here
root_fs_dev="$(findfs LABEL=esos_root)" || \
(echo "Error resolving the root device node!"; rescue_shell)

# Mount up
mount -t tmpfs -o size=@@root_size@@ tmpfs /mnt/root || rescue_shell
mount -o ro ${root_fs_dev} /mnt/tmp || rescue_shell

# Get the slot kernel parameter
slot_name="$(cmdline slot)"
if [ -z "${slot_name}" ]; then
	echo "Is the slot= kernel parameter missing?"
	rescue_shell
fi

# Make sure the archive exists
cpio_arch="/mnt/tmp/${slot_name}-root.cpio.bz2"
if [ ! -e "${cpio_arch}" ]; then
	echo "The '${cpio_arch}' file doesn't exist!"
	rescue_shell
fi

# Setup the root file system
echo "Initializing root file system..."
cd /mnt/root
spinner="/-\|"
spin_pos=0
bunzip2 -c ${cpio_arch} | \
	cpio -imduv --quiet | while read i; do
	printf "\b"${spinner:$spin_pos:1}
	spin_pos=$(( ( ${spin_pos} + 1 ) % 4 ))
done
printf "\b"
cd /
cp -a /dev/* /mnt/root/dev/
ln -s busybox /mnt/root/bin/sh
chroot /mnt/root /bin/sh -c "/bin/busybox --install -s"

# All done
umount /mnt/tmp
umount /proc
umount /sys

# Boot the real thing
exec switch_root /mnt/root /sbin/init

